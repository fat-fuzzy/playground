@use "sass:map";

//== CSS VARS

/**
 * src https://dev.to/felipperegazio/css-custom-properties-vars-with-sass-scss-a-practical-architecture-strategy-1m88
 * Use this mixin to declare a set of CSS Custom Properties.
 * The variables in $css_variables will be properly prefixed.
 * The use of this mixin is encoraged to keep a good scalability.
 *
 * Usage:
 *
 * @include generateCssVars((
 *  base-font-size: 65.5%,
 *  font-family: #{"HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif},
 * 
 *  primary-color: #33b5e5,
 *  secondary-color: #ff500a,
 * ));
 *
 * Will result in
 *
 * root {
 *    --prefix-var-name: value;
 *    --prefix-var-name: value;
 *    --prefix-var-name: value;
 * }
 *
 */
$_cssvars: ();
@mixin generateCssVars($css_variables, $prefix: $theme-prefix) {
  $_cssvars: map-merge( $_cssvars, $css_variables );
  :root {
    @each $name, $value in $css_variables {
      --#{$prefix}-#{$name}: #{$value};
    }
  }
}

@mixin theme-main() {
  @include generateCssVars($breakpoints, $theme-prefix);
  @include generateCssVars($theme-colors, $theme-prefix);
  @include generateCssVars($theme-layout, $theme-prefix);
  @include generateCssVars($theme-typography, $theme-prefix);
}

/**
 * Retrieve a css variable value with prefix
 *
 * Usage
 *
 * .selector {
 *   color: getVar(primary-color);
 * }
 *
 * Will result in
 *
 * .selector {
 *    color: getVar(prefix-primary-color);
 * }
 */
@function getVar($name, $prefix: $theme-prefix) {
  @return var(--#{$prefix}-#{$name}, map-get( $_cssvars, $name ));
}

/**
 * Retrieve a css variable value with prefix
 *
 * Usage
 *
 * .selector {
 *   color: getVar(primary-color);
     &--variant {
        @include setCssVar(button-height, 56px);
      }
 * }
 *
 * Will result in
 *
 * .selector {
 *    color: getVar(prefix-primary-color);
 * }
 * .selector--variant {
 *   --pm-button-height, 56px
*  }
 */
@mixin setCssVar($name, $value: '', $prefix: $theme-prefix) {
  --#{$prefix}-#{$name}: #{$value};
}

//== WIDTHS & HEIGHTS

@mixin calcWidth($width, $multiple, $margin:false) {
  @if $margin == false and map-has-key($theme-layout, $width) {
    $width-value: map-get($theme-layout, $width);

    width: calc(#{$width-value} * #{$multiple});
  }
  @if map-has-key($theme-layout, $width) and map-has-key($theme-layout, $margin) {
    $width-value: map-get($theme-layout, $width);
    $margin-value: map-get($theme-layout, $margin);
    
    width: calc(#{$width-value} * #{$multiple} - #{$margin-value});
  } @else {
    @if (map-has-key($theme-layout, $width) == false) {
      @warn 'Invalid width value: #{$width}.';
    }

    @if (map-has-key($theme-layout, $margin) == false) {
      @warn 'Invalid margin value: #{$margin}.';
    }
  }
}

//== FLEX
@mixin wrap-space-between() {
  flex-wrap: wrap;
  justify-content: space-between;
}

//== MEDIA QUERIES
@mixin min-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media screen and (min-width: #{$breakpoint-value}) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin max-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media screen and (max-width: #{$breakpoint-value}){
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin min-and-max-width($min, $max) {
  @if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
    $min-value: map-get($breakpoints, $min);
    $max-value: map-get($breakpoints, $max);
    @media screen and (min-width: #{$min-value}) and  (max-width: #{$max-value}) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $min) == false) {
      @warn 'Invalid breakpoint min value: #{$min}.';
    }

    @if (map-has-key($breakpoints, $max) == false) {
      @warn 'Invalid breakpoint max value: #{$max}.';
    }
  }
}

@mixin min-aspect-ratio($aspect-ratio)  {
  @if map-has-key($theme-layout, $aspect-ratio){
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (min-aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  } @else {
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin max-aspect-ratio($aspect-ratio)  {
  @if map-has-key($theme-layout, $aspect-ratio){
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (max-aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  }  @else {
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin min-aspect-ratio-min-width($aspect-ratio, $breakpoint)  {
  @if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (min-width: #{$breakpoint-value}) and (min-aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  } @else {

    @if (map-has-key($breakpoints, $breakpoint) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin min-aspect-ratio-max-width($aspect-ratio, $breakpoint)  {
  @if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (max-width: #{$breakpoint-value}) and (min-aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  }  @else {

    @if (map-has-key($breakpoints, $breakpoint) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin max-aspect-ratio-min-width($aspect-ratio, $breakpoint)  {
  @if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (min-width: #{$breakpoint-value}) and (max-aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  } @else {

    @if (map-has-key($breakpoints, $breakpoint) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin max-aspect-ratio-max-width($aspect-ratio, $breakpoint)  {
  @if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (max-width: #{$breakpoint-value}) and (max-aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  } @else {

    @if (map-has-key($breakpoints, $breakpoint) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin aspect-ratio($aspect-ratio)  {
  @if map-has-key($theme-layout, $aspect-ratio){
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  } @else {
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin aspect-ratio-min-width($aspect-ratio, $breakpoint)  {
  @if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    $aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
    @media screen and (min-width: #{$breakpoint-value}) and (aspect-ratio: #{$aspect-ratio-value}) {
      @content;
    }
  } @else {

    @if (map-has-key($breakpoints, $breakpoint) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
    @if (map-has-key($theme-layout, $aspect-ratio) == false) {
      @warn 'Invalid apect-ratio: #{$aspect-ratio}.';
    }
  }
}

@mixin orientation-min-width($orientation, $breakpoint)  {
  @if map-has-key($theme-layout, $orientation) and map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    $orientation-value: map-get($theme-layout, $orientation);
    @media screen and (min-width: #{$breakpoint-value}) and (orientation: #{$orientation-value}) {
      @content;
    }
  } @else {

    @if (map-has-key($breakpoints, $breakpoint) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
    @if (map-has-key($theme-layout, $orientation) == false) {
      @warn 'Invalid apect-ratio: #{$orientation}.';
    }
  }
}